{"ast":null,"code":"import{useDispatch,useSelector}from\"react-redux\";import{setDashboards}from\"../store/global\";import{setActiveDashboard}from\"../store/global\";import{v4 as uuidv4}from\"uuid\";export const useDashboard=()=>{const dispatch=useDispatch();const{dashboards}=useSelector(state=>state);const saveDashboards=dashboardsArr=>{try{localStorage.setItem(\"dashboards\",JSON.stringify(dashboardsArr));return true;}catch(err){throw new Error(err.message);}};const createNewDashboard=async()=>{const newId=uuidv4();const existingDashboards=await getLocalDashboards();if(existingDashboards.length>0){existingDashboards.push({id:newId,widgets:[],layouts:[]});localStorage.setItem(\"dashboards\",JSON.stringify(existingDashboards));dispatch(setDashboards(existingDashboards));dispatch(setActiveDashboard(newId));}else{let dashboardsTemp=[{id:newId,widgets:[],layouts:[]}];dispatch(setDashboards(dashboardsTemp));dispatch(setActiveDashboard(newId));}};const getLocalDashboards=async()=>{const dashboards=localStorage.getItem(\"dashboards\");if(dashboards){const existingDashboards=JSON.parse(dashboards);return existingDashboards;}else{return[];}};const getLocalActiveDashboard=async()=>{const localActiveDashboardId=localStorage.getItem(\"activeDashboard\");if(localActiveDashboardId){return localActiveDashboardId;}return\"home\";};return{createNewDashboard,saveDashboards,getLocalDashboards,getLocalActiveDashboard};};","map":{"version":3,"names":["useDispatch","useSelector","setDashboards","setActiveDashboard","v4","uuidv4","useDashboard","dispatch","dashboards","state","saveDashboards","dashboardsArr","localStorage","setItem","JSON","stringify","err","Error","message","createNewDashboard","newId","existingDashboards","getLocalDashboards","length","push","id","widgets","layouts","dashboardsTemp","getItem","parse","getLocalActiveDashboard","localActiveDashboardId"],"sources":["/Users/isaacson/Projects/invester/src/hooks/useDashboard.ts"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { GlobalData, setDashboards } from \"../store/global\";\nimport { setActiveDashboard } from \"../store/global\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useEffect } from \"react\";\n\nexport const useDashboard = () => {\n    const dispatch = useDispatch();\n    const { dashboards } = useSelector((state: GlobalData) => state);\n\n    const saveDashboards = (dashboardsArr: Dashboard[]) => {\n        try {\n            localStorage.setItem(\"dashboards\", JSON.stringify(dashboardsArr));\n            return true;\n        } catch (err: any) {\n            throw new Error(err.message);\n        }\n    };\n\n    const createNewDashboard = async () => {\n        const newId = uuidv4();\n\n        const existingDashboards = await getLocalDashboards();\n        if (existingDashboards.length > 0) {\n            existingDashboards.push({ id: newId, widgets: [], layouts: [] });\n            localStorage.setItem(\n                \"dashboards\",\n                JSON.stringify(existingDashboards)\n            );\n            dispatch(setDashboards(existingDashboards));\n            dispatch(setActiveDashboard(newId));\n        } else {\n            let dashboardsTemp = [{ id: newId, widgets: [], layouts: [] }];\n            dispatch(setDashboards(dashboardsTemp));\n            dispatch(setActiveDashboard(newId));\n        }\n    };\n\n    const getLocalDashboards = async (): Promise<Dashboard[]> => {\n        const dashboards = localStorage.getItem(\"dashboards\");\n        if (dashboards) {\n            const existingDashboards = JSON.parse(dashboards);\n            return existingDashboards;\n        } else {\n            return [];\n        }\n    };\n\n    const getLocalActiveDashboard = async (): Promise<string> => {\n        const localActiveDashboardId = localStorage.getItem(\"activeDashboard\");\n        if (localActiveDashboardId) {\n            return localActiveDashboardId;\n        }\n        return \"home\";\n    };\n\n    return {\n        createNewDashboard,\n        saveDashboards,\n        getLocalDashboards,\n        getLocalActiveDashboard,\n    };\n};\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAAqBC,aAAa,KAAQ,iBAAiB,CAC3D,OAASC,kBAAkB,KAAQ,iBAAiB,CACpD,OAASC,EAAE,GAAI,CAAAC,MAAM,KAAQ,MAAM,CAGnC,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAAAC,QAAQ,CAAGP,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAEQ,UAAW,CAAC,CAAGP,WAAW,CAAEQ,KAAiB,EAAKA,KAAK,CAAC,CAEhE,KAAM,CAAAC,cAAc,CAAIC,aAA0B,EAAK,CACnD,GAAI,CACAC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAEC,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC,CAAC,CACjE,MAAO,KAAI,CACf,CAAE,MAAOK,GAAQ,CAAE,CACf,KAAM,IAAI,CAAAC,KAAK,CAACD,GAAG,CAACE,OAAO,CAAC,CAChC,CACJ,CAAC,CAED,KAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACnC,KAAM,CAAAC,KAAK,CAAGf,MAAM,CAAC,CAAC,CAEtB,KAAM,CAAAgB,kBAAkB,CAAG,KAAM,CAAAC,kBAAkB,CAAC,CAAC,CACrD,GAAID,kBAAkB,CAACE,MAAM,CAAG,CAAC,CAAE,CAC/BF,kBAAkB,CAACG,IAAI,CAAC,CAAEC,EAAE,CAAEL,KAAK,CAAEM,OAAO,CAAE,EAAE,CAAEC,OAAO,CAAE,EAAG,CAAC,CAAC,CAChEf,YAAY,CAACC,OAAO,CAChB,YAAY,CACZC,IAAI,CAACC,SAAS,CAACM,kBAAkB,CACrC,CAAC,CACDd,QAAQ,CAACL,aAAa,CAACmB,kBAAkB,CAAC,CAAC,CAC3Cd,QAAQ,CAACJ,kBAAkB,CAACiB,KAAK,CAAC,CAAC,CACvC,CAAC,IAAM,CACH,GAAI,CAAAQ,cAAc,CAAG,CAAC,CAAEH,EAAE,CAAEL,KAAK,CAAEM,OAAO,CAAE,EAAE,CAAEC,OAAO,CAAE,EAAG,CAAC,CAAC,CAC9DpB,QAAQ,CAACL,aAAa,CAAC0B,cAAc,CAAC,CAAC,CACvCrB,QAAQ,CAACJ,kBAAkB,CAACiB,KAAK,CAAC,CAAC,CACvC,CACJ,CAAC,CAED,KAAM,CAAAE,kBAAkB,CAAG,KAAAA,CAAA,GAAkC,CACzD,KAAM,CAAAd,UAAU,CAAGI,YAAY,CAACiB,OAAO,CAAC,YAAY,CAAC,CACrD,GAAIrB,UAAU,CAAE,CACZ,KAAM,CAAAa,kBAAkB,CAAGP,IAAI,CAACgB,KAAK,CAACtB,UAAU,CAAC,CACjD,MAAO,CAAAa,kBAAkB,CAC7B,CAAC,IAAM,CACH,MAAO,EAAE,CACb,CACJ,CAAC,CAED,KAAM,CAAAU,uBAAuB,CAAG,KAAAA,CAAA,GAA6B,CACzD,KAAM,CAAAC,sBAAsB,CAAGpB,YAAY,CAACiB,OAAO,CAAC,iBAAiB,CAAC,CACtE,GAAIG,sBAAsB,CAAE,CACxB,MAAO,CAAAA,sBAAsB,CACjC,CACA,MAAO,MAAM,CACjB,CAAC,CAED,MAAO,CACHb,kBAAkB,CAClBT,cAAc,CACdY,kBAAkB,CAClBS,uBACJ,CAAC,CACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}