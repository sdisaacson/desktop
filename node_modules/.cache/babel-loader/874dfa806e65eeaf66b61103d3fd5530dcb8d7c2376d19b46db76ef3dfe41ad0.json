{"ast":null,"code":"import _objectSpread from\"/Users/isaacson/Projects/invester/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useDispatch,useSelector}from\"react-redux\";import{setBoard,setDashboards,setLayouts,setWidgets,toggleLayoutChanged}from\"../store/global\";import{INITIAL_LAYOUT,INITIAL_WIDGETS}from\"../constants/initials\";import{useDashboard}from\"./useDashboard\";export const useBoard=()=>{const dispatch=useDispatch();const{getLocalDashboards}=useDashboard();const{activeDashboard,dashboards}=useSelector(state=>state);const getBoard=()=>{const layout_changed=localStorage.getItem(\"layout_changed\");if(layout_changed){// layout changed before\ncreateLayout();}else{// this is the first init..\ninit();dispatch(toggleLayoutChanged(true));}};/// combines layouts and widgets by \"i\" and returns\n/// layout array\nconst generateLayoutArray=(_l,_w)=>{return new Promise(resolve=>{resolve(_l.map(lo=>{const{i}=lo;const widget_info=_w.find(w=>w.i===i);return _objectSpread(_objectSpread({},lo),widget_info);}));});};/// saves widgets, layouts to both global store and local storage\nconst save=async _ref=>{let{layout,widgets}=_ref;if(activeDashboard===\"home\"){const widgetList=await generateLayoutArray(layout,widgets);dispatch(setBoard(widgetList));dispatch(setWidgets(widgets));dispatch(setLayouts(layout));}else{const localDashboards=await getLocalDashboards();const updatedDashboards=localDashboards.map(dashB=>{if(dashB.id===activeDashboard){return _objectSpread(_objectSpread({},dashB),{},{widgets,layouts:layout});}else{return dashB;}});dispatch(setDashboards(updatedDashboards));const widgetList=await generateLayoutArray(layout,widgets);dispatch(setBoard(widgetList));}};/// create layout according to the selected dashboard id\n/// and sets the board\nconst createLayout=async()=>{if(activeDashboard===\"home\"){let layout=await JSON.parse(localStorage.getItem(\"layouts\"));let widgets=await JSON.parse(localStorage.getItem(\"widgets\"));const generatedLayout=await generateLayoutArray(layout,widgets);dispatch(setBoard(generatedLayout));save({layout,widgets});}else{if(dashboards.length>0){const selectedDashboard=dashboards.filter(dashB=>dashB.id===activeDashboard)[0];let layout=selectedDashboard.layouts;let widgets=selectedDashboard.widgets;const generatedLayout=await generateLayoutArray(layout,widgets);dispatch(setBoard(generatedLayout));save({layout,widgets});}}};const deleteWidget=async widgetId=>{if(activeDashboard===\"home\"){let layouts=await JSON.parse(localStorage.getItem(\"layouts\"));let widgets=await JSON.parse(localStorage.getItem(\"widgets\"));const newLayouts=layouts.filter(ly=>ly.i!==widgetId&&ly);const newWidgets=widgets.filter(wd=>wd.i!==widgetId&&wd);save({layout:newLayouts,widgets:newWidgets});}else{const thisDashboard=dashboards.find(dashB=>dashB.id===activeDashboard);const newLayouts=thisDashboard.layouts.filter(ly=>ly.i!==widgetId&&ly);const newWidgets=thisDashboard.widgets.filter(wd=>wd.i!==widgetId&&wd);save({layout:newLayouts,widgets:newWidgets});}};const init=async()=>{const layout=INITIAL_LAYOUT;const widgets=INITIAL_WIDGETS;save({layout,widgets});};return{save,init,createLayout,generateLayoutArray,getBoard,deleteWidget};};","map":{"version":3,"names":["useDispatch","useSelector","setBoard","setDashboards","setLayouts","setWidgets","toggleLayoutChanged","INITIAL_LAYOUT","INITIAL_WIDGETS","useDashboard","useBoard","dispatch","getLocalDashboards","activeDashboard","dashboards","state","getBoard","layout_changed","localStorage","getItem","createLayout","init","generateLayoutArray","_l","_w","Promise","resolve","map","lo","i","widget_info","find","w","_objectSpread","save","_ref","layout","widgets","widgetList","localDashboards","updatedDashboards","dashB","id","layouts","JSON","parse","generatedLayout","length","selectedDashboard","filter","deleteWidget","widgetId","newLayouts","ly","newWidgets","wd","thisDashboard"],"sources":["/Users/isaacson/Projects/invester/src/hooks/useBoard.ts"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport {\n    GlobalData,\n    setBoard,\n    setDashboards,\n    setLayouts,\n    setWidgets,\n    toggleLayoutChanged,\n} from \"../store/global\";\nimport { Layout } from \"react-grid-layout\";\nimport { Widget, WidgetInfo } from \"../components/Board/Board\";\nimport { INITIAL_LAYOUT, INITIAL_WIDGETS } from \"../constants/initials\";\nimport { useDashboard } from \"./useDashboard\";\n\nexport const useBoard = (): UseBoardMethods => {\n    const dispatch = useDispatch();\n    const { getLocalDashboards } = useDashboard();\n    const { activeDashboard, dashboards } = useSelector(\n        (state: GlobalData) => state\n    );\n\n    const getBoard = () => {\n        const layout_changed = localStorage.getItem(\"layout_changed\");\n        if (layout_changed) {\n            // layout changed before\n            createLayout();\n        } else {\n            // this is the first init..\n            init();\n            dispatch(toggleLayoutChanged(true));\n        }\n    };\n\n    /// combines layouts and widgets by \"i\" and returns\n    /// layout array\n    const generateLayoutArray = (\n        _l: Layout[],\n        _w: Widget[]\n    ): Promise<WidgetInfo[]> => {\n        return new Promise((resolve) => {\n            resolve(\n                _l.map((lo) => {\n                    const { i } = lo;\n                    const widget_info = _w.find((w: Widget) => w.i === i);\n                    return { ...lo, ...widget_info };\n                }) as WidgetInfo[]\n            );\n        });\n    };\n\n    /// saves widgets, layouts to both global store and local storage\n    const save = async ({ layout, widgets }: UseBoardProps) => {\n        if (activeDashboard === \"home\") {\n            const widgetList: Awaited<Promise<WidgetInfo[]>> =\n                await generateLayoutArray(layout, widgets);\n            dispatch(setBoard(widgetList));\n            dispatch(setWidgets(widgets));\n            dispatch(setLayouts(layout));\n        } else {\n            const localDashboards = await getLocalDashboards();\n            const updatedDashboards = localDashboards.map((dashB) => {\n                if (dashB.id === activeDashboard) {\n                    return { ...dashB, widgets, layouts: layout };\n                } else {\n                    return dashB;\n                }\n            });\n            dispatch(setDashboards(updatedDashboards));\n            const widgetList: Awaited<Promise<WidgetInfo[]>> =\n                await generateLayoutArray(layout, widgets);\n            dispatch(setBoard(widgetList));\n        }\n    };\n\n    /// create layout according to the selected dashboard id\n    /// and sets the board\n    const createLayout = async () => {\n        if (activeDashboard === \"home\") {\n            let layout: Layout[] = await JSON.parse(\n                localStorage.getItem(\"layouts\") as string\n            );\n            let widgets: WidgetInfo[] = await JSON.parse(\n                localStorage.getItem(\"widgets\") as string\n            );\n\n            const generatedLayout: Awaited<Promise<WidgetInfo[]>> =\n                await generateLayoutArray(layout, widgets);\n            dispatch(setBoard(generatedLayout));\n            save({ layout, widgets });\n        } else {\n            if (dashboards.length > 0) {\n                const selectedDashboard = dashboards.filter(\n                    (dashB) => dashB.id === activeDashboard\n                )[0];\n                let layout: Layout[] = selectedDashboard.layouts;\n                let widgets: Widget[] = selectedDashboard.widgets;\n\n                const generatedLayout: Awaited<Promise<WidgetInfo[]>> =\n                    await generateLayoutArray(layout, widgets);\n                dispatch(setBoard(generatedLayout));\n                save({ layout, widgets });\n            }\n        }\n    };\n\n    const deleteWidget = async (widgetId: string) => {\n        if (activeDashboard === \"home\") {\n            let layouts: Layout[] = await JSON.parse(\n                localStorage.getItem(\"layouts\") as string\n            );\n            let widgets: WidgetInfo[] = await JSON.parse(\n                localStorage.getItem(\"widgets\") as string\n            );\n\n            const newLayouts = layouts.filter((ly) => ly.i !== widgetId && ly);\n            const newWidgets = widgets.filter((wd) => wd.i !== widgetId && wd);\n\n            save({ layout: newLayouts, widgets: newWidgets });\n        } else {\n            const thisDashboard: Dashboard = dashboards.find(\n                (dashB) => dashB.id === activeDashboard\n            ) as Dashboard;\n            const newLayouts = thisDashboard.layouts.filter(\n                (ly) => ly.i !== widgetId && ly\n            );\n            const newWidgets = thisDashboard.widgets.filter(\n                (wd) => wd.i !== widgetId && wd\n            );\n            save({ layout: newLayouts, widgets: newWidgets });\n        }\n    };\n\n    const init = async () => {\n        const layout: Layout[] = INITIAL_LAYOUT;\n        const widgets: Widget[] = INITIAL_WIDGETS;\n\n        save({ layout, widgets });\n    };\n\n    return {\n        save,\n        init,\n        createLayout,\n        generateLayoutArray,\n        getBoard,\n        deleteWidget,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}