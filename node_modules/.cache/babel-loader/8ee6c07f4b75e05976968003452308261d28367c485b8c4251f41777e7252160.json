{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/isaacson/Projects/invester/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactDom = require(\"react-dom\");\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactDraggable = require(\"react-draggable\");\nvar _reactResizable = require(\"react-resizable\");\nvar _utils = require(\"./utils\");\nvar _calculateUtils = require(\"./calculateUtils\");\nvar _ReactGridLayoutPropTypes = require(\"./ReactGridLayoutPropTypes\");\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/*:: import type { Element as ReactElement, Node as ReactNode } from \"react\";*/\n/*:: import type {\n  ReactDraggableCallbackData,\n  GridDragEvent,\n  GridResizeEvent,\n  DroppingPosition,\n  Position,\n  ResizeHandleAxis\n} from \"./utils\";*/\n/*:: import type { PositionParams } from \"./calculateUtils\";*/\n/*:: import type { ResizeHandle, ReactRef } from \"./ReactGridLayoutPropTypes\";*/\n/*:: type PartialPosition = { top: number, left: number };*/\n/*:: type GridItemCallback<Data: GridDragEvent | GridResizeEvent> = (\n  i: string,\n  w: number,\n  h: number,\n  Data\n) => void;*/\n/*:: type ResizeCallbackData = {\n  node: HTMLElement,\n  size: Position,\n  handle: ResizeHandleAxis\n};*/\n/*:: type GridItemResizeCallback = (\n  e: Event,\n  data: ResizeCallbackData,\n  position: Position\n) => void;*/\n/*:: type State = {\n  resizing: ?{ top: number, left: number, width: number, height: number },\n  dragging: ?{ top: number, left: number },\n  className: string\n};*/\n/*:: type Props = {\n  children: ReactElement<any>,\n  cols: number,\n  containerWidth: number,\n  margin: [number, number],\n  containerPadding: [number, number],\n  rowHeight: number,\n  maxRows: number,\n  isDraggable: boolean,\n  isResizable: boolean,\n  isBounded: boolean,\n  static?: boolean,\n  useCSSTransforms?: boolean,\n  usePercentages?: boolean,\n  transformScale: number,\n  droppingPosition?: DroppingPosition,\n\n  className: string,\n  style?: Object,\n  // Draggability\n  cancel: string,\n  handle: string,\n\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n\n  minW: number,\n  maxW: number,\n  minH: number,\n  maxH: number,\n  i: string,\n\n  resizeHandles?: ResizeHandleAxis[],\n  resizeHandle?: ResizeHandle,\n\n  onDrag?: GridItemCallback<GridDragEvent>,\n  onDragStart?: GridItemCallback<GridDragEvent>,\n  onDragStop?: GridItemCallback<GridDragEvent>,\n  onResize?: GridItemCallback<GridResizeEvent>,\n  onResizeStart?: GridItemCallback<GridResizeEvent>,\n  onResizeStop?: GridItemCallback<GridResizeEvent>\n};*/\n/*:: type DefaultProps = {\n  className: string,\n  cancel: string,\n  handle: string,\n  minH: number,\n  minW: number,\n  maxH: number,\n  maxW: number,\n  transformScale: number\n};*/\n/**\n * An individual item within a ReactGridLayout.\n */\nclass GridItem extends _react.default.Component /*:: <Props, State>*/ {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", {\n      resizing: null,\n      dragging: null,\n      className: \"\"\n    });\n    _defineProperty(this, \"elementRef\", /*#__PURE__*/_react.default.createRef());\n    /**\n     * onDragStart event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n    _defineProperty(this, \"onDragStart\", (e, _ref) => {\n      let {\n        node\n      } = _ref;\n      const {\n        onDragStart,\n        transformScale\n      } = this.props;\n      if (!onDragStart) return;\n      const newPosition /*: PartialPosition*/ = {\n        top: 0,\n        left: 0\n      };\n\n      // TODO: this wont work on nested parents\n      const {\n        offsetParent\n      } = node;\n      if (!offsetParent) return;\n      const parentRect = offsetParent.getBoundingClientRect();\n      const clientRect = node.getBoundingClientRect();\n      const cLeft = clientRect.left / transformScale;\n      const pLeft = parentRect.left / transformScale;\n      const cTop = clientRect.top / transformScale;\n      const pTop = parentRect.top / transformScale;\n      newPosition.left = cLeft - pLeft + offsetParent.scrollLeft;\n      newPosition.top = cTop - pTop + offsetParent.scrollTop;\n      this.setState({\n        dragging: newPosition\n      });\n\n      // Call callback with this data\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(this.getPositionParams(), newPosition.top, newPosition.left, this.props.w, this.props.h);\n      return onDragStart.call(this, this.props.i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onDrag event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     * @param  {boolean} dontFlush    if true, will not call flushSync\n     */\n    _defineProperty(this, \"onDrag\", (e, _ref2, dontFlush) => {\n      let {\n        node,\n        deltaX,\n        deltaY\n      } = _ref2;\n      const {\n        onDrag\n      } = this.props;\n      if (!onDrag) return;\n      if (!this.state.dragging) {\n        throw new Error(\"onDrag called before onDragStart.\");\n      }\n      let top = this.state.dragging.top + deltaY;\n      let left = this.state.dragging.left + deltaX;\n      const {\n        isBounded,\n        i,\n        w,\n        h,\n        containerWidth\n      } = this.props;\n      const positionParams = this.getPositionParams();\n\n      // Boundary calculations; keeps items within the grid\n      if (isBounded) {\n        const {\n          offsetParent\n        } = node;\n        if (offsetParent) {\n          const {\n            margin,\n            rowHeight\n          } = this.props;\n          const bottomBoundary = offsetParent.clientHeight - (0, _calculateUtils.calcGridItemWHPx)(h, rowHeight, margin[1]);\n          top = (0, _calculateUtils.clamp)(top, 0, bottomBoundary);\n          const colWidth = (0, _calculateUtils.calcGridColWidth)(positionParams);\n          const rightBoundary = containerWidth - (0, _calculateUtils.calcGridItemWHPx)(w, colWidth, margin[0]);\n          left = (0, _calculateUtils.clamp)(left, 0, rightBoundary);\n        }\n      }\n      const newPosition /*: PartialPosition*/ = {\n        top,\n        left\n      };\n\n      // dontFlush is set if we're calling from inside\n      if (dontFlush) {\n        this.setState({\n          dragging: newPosition\n        });\n      } else {\n        (0, _reactDom.flushSync)(() => {\n          this.setState({\n            dragging: newPosition\n          });\n        });\n      }\n\n      // Call callback with this data\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(positionParams, top, left, w, h);\n      return onDrag.call(this, i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onDragStop event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n    _defineProperty(this, \"onDragStop\", (e, _ref3) => {\n      let {\n        node\n      } = _ref3;\n      const {\n        onDragStop\n      } = this.props;\n      if (!onDragStop) return;\n      if (!this.state.dragging) {\n        throw new Error(\"onDragEnd called before onDragStart.\");\n      }\n      const {\n        w,\n        h,\n        i\n      } = this.props;\n      const {\n        left,\n        top\n      } = this.state.dragging;\n      const newPosition /*: PartialPosition*/ = {\n        top,\n        left\n      };\n      this.setState({\n        dragging: null\n      });\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(this.getPositionParams(), top, left, w, h);\n      return onDragStop.call(this, i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onResizeStop event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node and size information\n     */\n    _defineProperty(this, \"onResizeStop\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResizeStop\"));\n    // onResizeStart event handler\n    _defineProperty(this, \"onResizeStart\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResizeStart\"));\n    // onResize event handler\n    _defineProperty(this, \"onResize\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResize\"));\n  }\n  shouldComponentUpdate(nextProps /*: Props*/, nextState /*: State*/) /*: boolean*/{\n    // We can't deeply compare children. If the developer memoizes them, we can\n    // use this optimization.\n    if (this.props.children !== nextProps.children) return true;\n    if (this.props.droppingPosition !== nextProps.droppingPosition) return true;\n    // TODO memoize these calculations so they don't take so long?\n    const oldPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(this.props), this.props.x, this.props.y, this.props.w, this.props.h, this.state);\n    const newPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(nextProps), nextProps.x, nextProps.y, nextProps.w, nextProps.h, nextState);\n    return !(0, _utils.fastPositionEqual)(oldPosition, newPosition) || this.props.useCSSTransforms !== nextProps.useCSSTransforms;\n  }\n  componentDidMount() {\n    this.moveDroppingItem({});\n  }\n  componentDidUpdate(prevProps /*: Props*/) {\n    this.moveDroppingItem(prevProps);\n  }\n\n  // When a droppingPosition is present, this means we should fire a move event, as if we had moved\n  // this element by `x, y` pixels.\n  moveDroppingItem(prevProps /*: Props*/) {\n    const {\n      droppingPosition\n    } = this.props;\n    if (!droppingPosition) return;\n    const node = this.elementRef.current;\n    // Can't find DOM node (are we unmounted?)\n    if (!node) return;\n    const prevDroppingPosition = prevProps.droppingPosition || {\n      left: 0,\n      top: 0\n    };\n    const {\n      dragging\n    } = this.state;\n    const shouldDrag = dragging && droppingPosition.left !== prevDroppingPosition.left || droppingPosition.top !== prevDroppingPosition.top;\n    if (!dragging) {\n      this.onDragStart(droppingPosition.e, {\n        node,\n        deltaX: droppingPosition.left,\n        deltaY: droppingPosition.top\n      });\n    } else if (shouldDrag) {\n      const deltaX = droppingPosition.left - dragging.left;\n      const deltaY = droppingPosition.top - dragging.top;\n      this.onDrag(droppingPosition.e, {\n        node,\n        deltaX,\n        deltaY\n      }, true // dontFLush: avoid flushSync to temper warnings\n      );\n    }\n  }\n  getPositionParams() /*: PositionParams*/{\n    let props /*: Props*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    return {\n      cols: props.cols,\n      containerPadding: props.containerPadding,\n      containerWidth: props.containerWidth,\n      margin: props.margin,\n      maxRows: props.maxRows,\n      rowHeight: props.rowHeight\n    };\n  }\n\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n  createStyle(pos /*: Position*/) /*: { [key: string]: ?string }*/{\n    const {\n      usePercentages,\n      containerWidth,\n      useCSSTransforms\n    } = this.props;\n    let style;\n    // CSS Transforms support (default)\n    if (useCSSTransforms) {\n      style = (0, _utils.setTransform)(pos);\n    } else {\n      // top,left (slow)\n      style = (0, _utils.setTopLeft)(pos);\n\n      // This is used for server rendering.\n      if (usePercentages) {\n        style.left = (0, _utils.perc)(pos.left / containerWidth);\n        style.width = (0, _utils.perc)(pos.width / containerWidth);\n      }\n    }\n    return style;\n  }\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @return {Element}          Child wrapped in Draggable.\n   */\n  mixinDraggable(child /*: ReactElement<any>*/, isDraggable /*: boolean*/) /*: ReactElement<any>*/{\n    return /*#__PURE__*/_react.default.createElement(_reactDraggable.DraggableCore, {\n      disabled: !isDraggable,\n      onStart: this.onDragStart,\n      onDrag: this.onDrag,\n      onStop: this.onDragStop,\n      handle: this.props.handle,\n      cancel: \".react-resizable-handle\" + (this.props.cancel ? \",\" + this.props.cancel : \"\"),\n      scale: this.props.transformScale,\n      nodeRef: this.elementRef\n    }, child);\n  }\n\n  /**\n   * Utility function to setup callback handler definitions for\n   * similarily structured resize events.\n   */\n  curryResizeHandler(position /*: Position*/, handler /*: Function*/) /*: Function*/{\n    return (e /*: Event*/, data /*: ResizeCallbackData*/) => /*: Function*/handler(e, data, position);\n  }\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n  mixinResizable(child /*: ReactElement<any>*/, position /*: Position*/, isResizable /*: boolean*/) /*: ReactElement<any>*/{\n    const {\n      cols,\n      minW,\n      minH,\n      maxW,\n      maxH,\n      transformScale,\n      resizeHandles,\n      resizeHandle\n    } = this.props;\n    const positionParams = this.getPositionParams();\n\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n    const maxWidth = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, cols, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    const mins = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, minW, minH);\n    const maxes = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, maxW, maxH);\n    const minConstraints = [mins.width, mins.height];\n    const maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return /*#__PURE__*/_react.default.createElement(_reactResizable.Resizable\n    // These are opts for the resize handle itself\n    , {\n      draggableOpts: {\n        disabled: !isResizable\n      },\n      className: isResizable ? undefined : \"react-resizable-hide\",\n      width: position.width,\n      height: position.height,\n      minConstraints: minConstraints,\n      maxConstraints: maxConstraints,\n      onResizeStop: this.curryResizeHandler(position, this.onResizeStop),\n      onResizeStart: this.curryResizeHandler(position, this.onResizeStart),\n      onResize: this.curryResizeHandler(position, this.onResize),\n      transformScale: transformScale,\n      resizeHandles: resizeHandles,\n      handle: resizeHandle\n    }, child);\n  }\n  /**\n   * Wrapper around resize events to provide more useful data.\n   */\n  onResizeHandler(e /*: Event*/, _ref4 /*:: */,\n  // 'size' is updated position\n  position /*: Position*/,\n  // existing position\n  handlerName /*: string*/) /*: void*/{\n    let {\n      node,\n      size,\n      handle\n    } /*: ResizeCallbackData*/ = _ref4 /*: ResizeCallbackData*/;\n    const handler = this.props[handlerName];\n    if (!handler) return;\n    const {\n      x,\n      y,\n      i,\n      maxH,\n      minH,\n      containerWidth\n    } = this.props;\n    const {\n      minW,\n      maxW\n    } = this.props;\n\n    // Clamping of dimensions based on resize direction\n    let updatedSize = size;\n    if (node) {\n      updatedSize = (0, _utils.resizeItemInDirection)(handle, position, size, containerWidth);\n      (0, _reactDom.flushSync)(() => {\n        this.setState({\n          resizing: handlerName === \"onResizeStop\" ? null : updatedSize\n        });\n      });\n    }\n\n    // Get new XY based on pixel size\n    let {\n      w,\n      h\n    } = (0, _calculateUtils.calcWH)(this.getPositionParams(), updatedSize.width, updatedSize.height, x, y, handle);\n\n    // Min/max capping.\n    // minW should be at least 1 (TODO propTypes validation?)\n    w = (0, _calculateUtils.clamp)(w, Math.max(minW, 1), maxW);\n    h = (0, _calculateUtils.clamp)(h, minH, maxH);\n    handler.call(this, i, w, h, {\n      e,\n      node,\n      size: updatedSize,\n      handle\n    });\n  }\n  render() /*: ReactNode*/{\n    const {\n      x,\n      y,\n      w,\n      h,\n      isDraggable,\n      isResizable,\n      droppingPosition,\n      useCSSTransforms\n    } = this.props;\n    const pos = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(), x, y, w, h, this.state);\n    const child = _react.default.Children.only(this.props.children);\n\n    // Create the child element. We clone the existing element but modify its className and style.\n    let newChild = /*#__PURE__*/_react.default.cloneElement(child, {\n      ref: this.elementRef,\n      className: (0, _clsx.default)(\"react-grid-item\", child.props.className, this.props.className, {\n        static: this.props.static,\n        resizing: Boolean(this.state.resizing),\n        \"react-draggable\": isDraggable,\n        \"react-draggable-dragging\": Boolean(this.state.dragging),\n        dropping: Boolean(droppingPosition),\n        cssTransforms: useCSSTransforms\n      }),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: _objectSpread(_objectSpread(_objectSpread({}, this.props.style), child.props.style), this.createStyle(pos))\n    });\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    newChild = this.mixinResizable(newChild, pos, isResizable);\n\n    // Draggable support. This is always on, except for with placeholders.\n    newChild = this.mixinDraggable(newChild, isDraggable);\n    return newChild;\n  }\n}\nexports.default = GridItem;\n_defineProperty(GridItem, \"propTypes\", {\n  // Children must be only a single element\n  children: _propTypes.default.element,\n  // General grid attributes\n  cols: _propTypes.default.number.isRequired,\n  containerWidth: _propTypes.default.number.isRequired,\n  rowHeight: _propTypes.default.number.isRequired,\n  margin: _propTypes.default.array.isRequired,\n  maxRows: _propTypes.default.number.isRequired,\n  containerPadding: _propTypes.default.array.isRequired,\n  // These are all in grid units\n  x: _propTypes.default.number.isRequired,\n  y: _propTypes.default.number.isRequired,\n  w: _propTypes.default.number.isRequired,\n  h: _propTypes.default.number.isRequired,\n  // All optional\n  minW: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minWidth not Number\");\n    if (value > props.w || value > props.maxW) return new Error(\"minWidth larger than item width/maxWidth\");\n  },\n  maxW: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxWidth not Number\");\n    if (value < props.w || value < props.minW) return new Error(\"maxWidth smaller than item width/minWidth\");\n  },\n  minH: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minHeight not Number\");\n    if (value > props.h || value > props.maxH) return new Error(\"minHeight larger than item height/maxHeight\");\n  },\n  maxH: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxHeight not Number\");\n    if (value < props.h || value < props.minH) return new Error(\"maxHeight smaller than item height/minHeight\");\n  },\n  // ID is nice to have for callbacks\n  i: _propTypes.default.string.isRequired,\n  // Resize handle options\n  resizeHandles: _ReactGridLayoutPropTypes.resizeHandleAxesType,\n  resizeHandle: _ReactGridLayoutPropTypes.resizeHandleType,\n  // Functions\n  onDragStop: _propTypes.default.func,\n  onDragStart: _propTypes.default.func,\n  onDrag: _propTypes.default.func,\n  onResizeStop: _propTypes.default.func,\n  onResizeStart: _propTypes.default.func,\n  onResize: _propTypes.default.func,\n  // Flags\n  isDraggable: _propTypes.default.bool.isRequired,\n  isResizable: _propTypes.default.bool.isRequired,\n  isBounded: _propTypes.default.bool.isRequired,\n  static: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool.isRequired,\n  transformScale: _propTypes.default.number,\n  // Others\n  className: _propTypes.default.string,\n  // Selector for draggable handle\n  handle: _propTypes.default.string,\n  // Selector for draggable cancel (see react-draggable)\n  cancel: _propTypes.default.string,\n  // Current position of a dropping element\n  droppingPosition: _propTypes.default.shape({\n    e: _propTypes.default.object.isRequired,\n    left: _propTypes.default.number.isRequired,\n    top: _propTypes.default.number.isRequired\n  })\n});\n_defineProperty(GridItem, \"defaultProps\", {\n  className: \"\",\n  cancel: \"\",\n  handle: \"\",\n  minH: 1,\n  minW: 1,\n  maxH: Infinity,\n  maxW: Infinity,\n  transformScale: 1\n});","map":{"version":3,"names":["_objectSpread","require","default","Object","defineProperty","exports","value","_react","_interopRequireDefault","_reactDom","_propTypes","_reactDraggable","_reactResizable","_utils","_calculateUtils","_ReactGridLayoutPropTypes","_clsx","e","__esModule","_defineProperty","r","t","_toPropertyKey","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","GridItem","Component","constructor","arguments","resizing","dragging","className","createRef","_ref","node","onDragStart","transformScale","props","newPosition","top","left","offsetParent","parentRect","getBoundingClientRect","clientRect","cLeft","pLeft","cTop","pTop","scrollLeft","scrollTop","setState","x","y","calcXY","getPositionParams","w","h","_ref2","dontFlush","deltaX","deltaY","onDrag","state","Error","isBounded","containerWidth","positionParams","margin","rowHeight","bottomBoundary","clientHeight","calcGridItemWHPx","clamp","colWidth","calcGridColWidth","rightBoundary","flushSync","_ref3","onDragStop","callbackData","position","onResizeHandler","shouldComponentUpdate","nextProps","nextState","children","droppingPosition","oldPosition","calcGridItemPosition","fastPositionEqual","useCSSTransforms","componentDidMount","moveDroppingItem","componentDidUpdate","prevProps","elementRef","current","prevDroppingPosition","shouldDrag","length","undefined","cols","containerPadding","maxRows","createStyle","pos","usePercentages","style","setTransform","setTopLeft","perc","width","mixinDraggable","child","isDraggable","createElement","DraggableCore","disabled","onStart","onStop","handle","cancel","scale","nodeRef","curryResizeHandler","handler","data","mixinResizable","isResizable","minW","minH","maxW","maxH","resizeHandles","resizeHandle","maxWidth","mins","maxes","minConstraints","height","maxConstraints","Math","min","Infinity","Resizable","draggableOpts","onResizeStop","onResizeStart","onResize","_ref4","handlerName","size","updatedSize","resizeItemInDirection","calcWH","max","render","Children","only","newChild","cloneElement","ref","static","Boolean","dropping","cssTransforms","element","number","isRequired","array","propName","string","resizeHandleAxesType","resizeHandleType","func","bool","shape","object"],"sources":["/Users/isaacson/Projects/invester/node_modules/react-grid-layout/build/GridItem.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactDom = require(\"react-dom\");\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactDraggable = require(\"react-draggable\");\nvar _reactResizable = require(\"react-resizable\");\nvar _utils = require(\"./utils\");\nvar _calculateUtils = require(\"./calculateUtils\");\nvar _ReactGridLayoutPropTypes = require(\"./ReactGridLayoutPropTypes\");\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*:: import type { Element as ReactElement, Node as ReactNode } from \"react\";*/\n/*:: import type {\n  ReactDraggableCallbackData,\n  GridDragEvent,\n  GridResizeEvent,\n  DroppingPosition,\n  Position,\n  ResizeHandleAxis\n} from \"./utils\";*/\n/*:: import type { PositionParams } from \"./calculateUtils\";*/\n/*:: import type { ResizeHandle, ReactRef } from \"./ReactGridLayoutPropTypes\";*/\n/*:: type PartialPosition = { top: number, left: number };*/\n/*:: type GridItemCallback<Data: GridDragEvent | GridResizeEvent> = (\n  i: string,\n  w: number,\n  h: number,\n  Data\n) => void;*/\n/*:: type ResizeCallbackData = {\n  node: HTMLElement,\n  size: Position,\n  handle: ResizeHandleAxis\n};*/\n/*:: type GridItemResizeCallback = (\n  e: Event,\n  data: ResizeCallbackData,\n  position: Position\n) => void;*/\n/*:: type State = {\n  resizing: ?{ top: number, left: number, width: number, height: number },\n  dragging: ?{ top: number, left: number },\n  className: string\n};*/\n/*:: type Props = {\n  children: ReactElement<any>,\n  cols: number,\n  containerWidth: number,\n  margin: [number, number],\n  containerPadding: [number, number],\n  rowHeight: number,\n  maxRows: number,\n  isDraggable: boolean,\n  isResizable: boolean,\n  isBounded: boolean,\n  static?: boolean,\n  useCSSTransforms?: boolean,\n  usePercentages?: boolean,\n  transformScale: number,\n  droppingPosition?: DroppingPosition,\n\n  className: string,\n  style?: Object,\n  // Draggability\n  cancel: string,\n  handle: string,\n\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n\n  minW: number,\n  maxW: number,\n  minH: number,\n  maxH: number,\n  i: string,\n\n  resizeHandles?: ResizeHandleAxis[],\n  resizeHandle?: ResizeHandle,\n\n  onDrag?: GridItemCallback<GridDragEvent>,\n  onDragStart?: GridItemCallback<GridDragEvent>,\n  onDragStop?: GridItemCallback<GridDragEvent>,\n  onResize?: GridItemCallback<GridResizeEvent>,\n  onResizeStart?: GridItemCallback<GridResizeEvent>,\n  onResizeStop?: GridItemCallback<GridResizeEvent>\n};*/\n/*:: type DefaultProps = {\n  className: string,\n  cancel: string,\n  handle: string,\n  minH: number,\n  minW: number,\n  maxH: number,\n  maxW: number,\n  transformScale: number\n};*/\n/**\n * An individual item within a ReactGridLayout.\n */\nclass GridItem extends _react.default.Component /*:: <Props, State>*/{\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", {\n      resizing: null,\n      dragging: null,\n      className: \"\"\n    });\n    _defineProperty(this, \"elementRef\", /*#__PURE__*/_react.default.createRef());\n    /**\n     * onDragStart event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n    _defineProperty(this, \"onDragStart\", (e, _ref) => {\n      let {\n        node\n      } = _ref;\n      const {\n        onDragStart,\n        transformScale\n      } = this.props;\n      if (!onDragStart) return;\n      const newPosition /*: PartialPosition*/ = {\n        top: 0,\n        left: 0\n      };\n\n      // TODO: this wont work on nested parents\n      const {\n        offsetParent\n      } = node;\n      if (!offsetParent) return;\n      const parentRect = offsetParent.getBoundingClientRect();\n      const clientRect = node.getBoundingClientRect();\n      const cLeft = clientRect.left / transformScale;\n      const pLeft = parentRect.left / transformScale;\n      const cTop = clientRect.top / transformScale;\n      const pTop = parentRect.top / transformScale;\n      newPosition.left = cLeft - pLeft + offsetParent.scrollLeft;\n      newPosition.top = cTop - pTop + offsetParent.scrollTop;\n      this.setState({\n        dragging: newPosition\n      });\n\n      // Call callback with this data\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(this.getPositionParams(), newPosition.top, newPosition.left, this.props.w, this.props.h);\n      return onDragStart.call(this, this.props.i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onDrag event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     * @param  {boolean} dontFlush    if true, will not call flushSync\n     */\n    _defineProperty(this, \"onDrag\", (e, _ref2, dontFlush) => {\n      let {\n        node,\n        deltaX,\n        deltaY\n      } = _ref2;\n      const {\n        onDrag\n      } = this.props;\n      if (!onDrag) return;\n      if (!this.state.dragging) {\n        throw new Error(\"onDrag called before onDragStart.\");\n      }\n      let top = this.state.dragging.top + deltaY;\n      let left = this.state.dragging.left + deltaX;\n      const {\n        isBounded,\n        i,\n        w,\n        h,\n        containerWidth\n      } = this.props;\n      const positionParams = this.getPositionParams();\n\n      // Boundary calculations; keeps items within the grid\n      if (isBounded) {\n        const {\n          offsetParent\n        } = node;\n        if (offsetParent) {\n          const {\n            margin,\n            rowHeight\n          } = this.props;\n          const bottomBoundary = offsetParent.clientHeight - (0, _calculateUtils.calcGridItemWHPx)(h, rowHeight, margin[1]);\n          top = (0, _calculateUtils.clamp)(top, 0, bottomBoundary);\n          const colWidth = (0, _calculateUtils.calcGridColWidth)(positionParams);\n          const rightBoundary = containerWidth - (0, _calculateUtils.calcGridItemWHPx)(w, colWidth, margin[0]);\n          left = (0, _calculateUtils.clamp)(left, 0, rightBoundary);\n        }\n      }\n      const newPosition /*: PartialPosition*/ = {\n        top,\n        left\n      };\n\n      // dontFlush is set if we're calling from inside\n      if (dontFlush) {\n        this.setState({\n          dragging: newPosition\n        });\n      } else {\n        (0, _reactDom.flushSync)(() => {\n          this.setState({\n            dragging: newPosition\n          });\n        });\n      }\n\n      // Call callback with this data\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(positionParams, top, left, w, h);\n      return onDrag.call(this, i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onDragStop event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node, delta and position information\n     */\n    _defineProperty(this, \"onDragStop\", (e, _ref3) => {\n      let {\n        node\n      } = _ref3;\n      const {\n        onDragStop\n      } = this.props;\n      if (!onDragStop) return;\n      if (!this.state.dragging) {\n        throw new Error(\"onDragEnd called before onDragStart.\");\n      }\n      const {\n        w,\n        h,\n        i\n      } = this.props;\n      const {\n        left,\n        top\n      } = this.state.dragging;\n      const newPosition /*: PartialPosition*/ = {\n        top,\n        left\n      };\n      this.setState({\n        dragging: null\n      });\n      const {\n        x,\n        y\n      } = (0, _calculateUtils.calcXY)(this.getPositionParams(), top, left, w, h);\n      return onDragStop.call(this, i, x, y, {\n        e,\n        node,\n        newPosition\n      });\n    });\n    /**\n     * onResizeStop event handler\n     * @param  {Event}  e             event data\n     * @param  {Object} callbackData  an object with node and size information\n     */\n    _defineProperty(this, \"onResizeStop\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResizeStop\"));\n    // onResizeStart event handler\n    _defineProperty(this, \"onResizeStart\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResizeStart\"));\n    // onResize event handler\n    _defineProperty(this, \"onResize\", (e, callbackData, position) => this.onResizeHandler(e, callbackData, position, \"onResize\"));\n  }\n  shouldComponentUpdate(nextProps /*: Props*/, nextState /*: State*/) /*: boolean*/{\n    // We can't deeply compare children. If the developer memoizes them, we can\n    // use this optimization.\n    if (this.props.children !== nextProps.children) return true;\n    if (this.props.droppingPosition !== nextProps.droppingPosition) return true;\n    // TODO memoize these calculations so they don't take so long?\n    const oldPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(this.props), this.props.x, this.props.y, this.props.w, this.props.h, this.state);\n    const newPosition = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(nextProps), nextProps.x, nextProps.y, nextProps.w, nextProps.h, nextState);\n    return !(0, _utils.fastPositionEqual)(oldPosition, newPosition) || this.props.useCSSTransforms !== nextProps.useCSSTransforms;\n  }\n  componentDidMount() {\n    this.moveDroppingItem({});\n  }\n  componentDidUpdate(prevProps /*: Props*/) {\n    this.moveDroppingItem(prevProps);\n  }\n\n  // When a droppingPosition is present, this means we should fire a move event, as if we had moved\n  // this element by `x, y` pixels.\n  moveDroppingItem(prevProps /*: Props*/) {\n    const {\n      droppingPosition\n    } = this.props;\n    if (!droppingPosition) return;\n    const node = this.elementRef.current;\n    // Can't find DOM node (are we unmounted?)\n    if (!node) return;\n    const prevDroppingPosition = prevProps.droppingPosition || {\n      left: 0,\n      top: 0\n    };\n    const {\n      dragging\n    } = this.state;\n    const shouldDrag = dragging && droppingPosition.left !== prevDroppingPosition.left || droppingPosition.top !== prevDroppingPosition.top;\n    if (!dragging) {\n      this.onDragStart(droppingPosition.e, {\n        node,\n        deltaX: droppingPosition.left,\n        deltaY: droppingPosition.top\n      });\n    } else if (shouldDrag) {\n      const deltaX = droppingPosition.left - dragging.left;\n      const deltaY = droppingPosition.top - dragging.top;\n      this.onDrag(droppingPosition.e, {\n        node,\n        deltaX,\n        deltaY\n      }, true // dontFLush: avoid flushSync to temper warnings\n      );\n    }\n  }\n  getPositionParams() /*: PositionParams*/{\n    let props /*: Props*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    return {\n      cols: props.cols,\n      containerPadding: props.containerPadding,\n      containerWidth: props.containerWidth,\n      margin: props.margin,\n      maxRows: props.maxRows,\n      rowHeight: props.rowHeight\n    };\n  }\n\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n  createStyle(pos /*: Position*/) /*: { [key: string]: ?string }*/{\n    const {\n      usePercentages,\n      containerWidth,\n      useCSSTransforms\n    } = this.props;\n    let style;\n    // CSS Transforms support (default)\n    if (useCSSTransforms) {\n      style = (0, _utils.setTransform)(pos);\n    } else {\n      // top,left (slow)\n      style = (0, _utils.setTopLeft)(pos);\n\n      // This is used for server rendering.\n      if (usePercentages) {\n        style.left = (0, _utils.perc)(pos.left / containerWidth);\n        style.width = (0, _utils.perc)(pos.width / containerWidth);\n      }\n    }\n    return style;\n  }\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @return {Element}          Child wrapped in Draggable.\n   */\n  mixinDraggable(child /*: ReactElement<any>*/, isDraggable /*: boolean*/) /*: ReactElement<any>*/{\n    return /*#__PURE__*/_react.default.createElement(_reactDraggable.DraggableCore, {\n      disabled: !isDraggable,\n      onStart: this.onDragStart,\n      onDrag: this.onDrag,\n      onStop: this.onDragStop,\n      handle: this.props.handle,\n      cancel: \".react-resizable-handle\" + (this.props.cancel ? \",\" + this.props.cancel : \"\"),\n      scale: this.props.transformScale,\n      nodeRef: this.elementRef\n    }, child);\n  }\n\n  /**\n   * Utility function to setup callback handler definitions for\n   * similarily structured resize events.\n   */\n  curryResizeHandler(position /*: Position*/, handler /*: Function*/) /*: Function*/{\n    return (e /*: Event*/, data /*: ResizeCallbackData*/) => /*: Function*/handler(e, data, position);\n  }\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n  mixinResizable(child /*: ReactElement<any>*/, position /*: Position*/, isResizable /*: boolean*/) /*: ReactElement<any>*/{\n    const {\n      cols,\n      minW,\n      minH,\n      maxW,\n      maxH,\n      transformScale,\n      resizeHandles,\n      resizeHandle\n    } = this.props;\n    const positionParams = this.getPositionParams();\n\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n    const maxWidth = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, cols, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    const mins = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, minW, minH);\n    const maxes = (0, _calculateUtils.calcGridItemPosition)(positionParams, 0, 0, maxW, maxH);\n    const minConstraints = [mins.width, mins.height];\n    const maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return /*#__PURE__*/_react.default.createElement(_reactResizable.Resizable\n    // These are opts for the resize handle itself\n    , {\n      draggableOpts: {\n        disabled: !isResizable\n      },\n      className: isResizable ? undefined : \"react-resizable-hide\",\n      width: position.width,\n      height: position.height,\n      minConstraints: minConstraints,\n      maxConstraints: maxConstraints,\n      onResizeStop: this.curryResizeHandler(position, this.onResizeStop),\n      onResizeStart: this.curryResizeHandler(position, this.onResizeStart),\n      onResize: this.curryResizeHandler(position, this.onResize),\n      transformScale: transformScale,\n      resizeHandles: resizeHandles,\n      handle: resizeHandle\n    }, child);\n  }\n  /**\n   * Wrapper around resize events to provide more useful data.\n   */\n  onResizeHandler(e /*: Event*/, _ref4 /*:: */,\n  // 'size' is updated position\n  position /*: Position*/,\n  // existing position\n  handlerName /*: string*/) /*: void*/{\n    let {\n      node,\n      size,\n      handle\n    } /*: ResizeCallbackData*/ = _ref4 /*: ResizeCallbackData*/;\n    const handler = this.props[handlerName];\n    if (!handler) return;\n    const {\n      x,\n      y,\n      i,\n      maxH,\n      minH,\n      containerWidth\n    } = this.props;\n    const {\n      minW,\n      maxW\n    } = this.props;\n\n    // Clamping of dimensions based on resize direction\n    let updatedSize = size;\n    if (node) {\n      updatedSize = (0, _utils.resizeItemInDirection)(handle, position, size, containerWidth);\n      (0, _reactDom.flushSync)(() => {\n        this.setState({\n          resizing: handlerName === \"onResizeStop\" ? null : updatedSize\n        });\n      });\n    }\n\n    // Get new XY based on pixel size\n    let {\n      w,\n      h\n    } = (0, _calculateUtils.calcWH)(this.getPositionParams(), updatedSize.width, updatedSize.height, x, y, handle);\n\n    // Min/max capping.\n    // minW should be at least 1 (TODO propTypes validation?)\n    w = (0, _calculateUtils.clamp)(w, Math.max(minW, 1), maxW);\n    h = (0, _calculateUtils.clamp)(h, minH, maxH);\n    handler.call(this, i, w, h, {\n      e,\n      node,\n      size: updatedSize,\n      handle\n    });\n  }\n  render() /*: ReactNode*/{\n    const {\n      x,\n      y,\n      w,\n      h,\n      isDraggable,\n      isResizable,\n      droppingPosition,\n      useCSSTransforms\n    } = this.props;\n    const pos = (0, _calculateUtils.calcGridItemPosition)(this.getPositionParams(), x, y, w, h, this.state);\n    const child = _react.default.Children.only(this.props.children);\n\n    // Create the child element. We clone the existing element but modify its className and style.\n    let newChild = /*#__PURE__*/_react.default.cloneElement(child, {\n      ref: this.elementRef,\n      className: (0, _clsx.default)(\"react-grid-item\", child.props.className, this.props.className, {\n        static: this.props.static,\n        resizing: Boolean(this.state.resizing),\n        \"react-draggable\": isDraggable,\n        \"react-draggable-dragging\": Boolean(this.state.dragging),\n        dropping: Boolean(droppingPosition),\n        cssTransforms: useCSSTransforms\n      }),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: {\n        ...this.props.style,\n        ...child.props.style,\n        ...this.createStyle(pos)\n      }\n    });\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    newChild = this.mixinResizable(newChild, pos, isResizable);\n\n    // Draggable support. This is always on, except for with placeholders.\n    newChild = this.mixinDraggable(newChild, isDraggable);\n    return newChild;\n  }\n}\nexports.default = GridItem;\n_defineProperty(GridItem, \"propTypes\", {\n  // Children must be only a single element\n  children: _propTypes.default.element,\n  // General grid attributes\n  cols: _propTypes.default.number.isRequired,\n  containerWidth: _propTypes.default.number.isRequired,\n  rowHeight: _propTypes.default.number.isRequired,\n  margin: _propTypes.default.array.isRequired,\n  maxRows: _propTypes.default.number.isRequired,\n  containerPadding: _propTypes.default.array.isRequired,\n  // These are all in grid units\n  x: _propTypes.default.number.isRequired,\n  y: _propTypes.default.number.isRequired,\n  w: _propTypes.default.number.isRequired,\n  h: _propTypes.default.number.isRequired,\n  // All optional\n  minW: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minWidth not Number\");\n    if (value > props.w || value > props.maxW) return new Error(\"minWidth larger than item width/maxWidth\");\n  },\n  maxW: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxWidth not Number\");\n    if (value < props.w || value < props.minW) return new Error(\"maxWidth smaller than item width/minWidth\");\n  },\n  minH: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minHeight not Number\");\n    if (value > props.h || value > props.maxH) return new Error(\"minHeight larger than item height/maxHeight\");\n  },\n  maxH: function (props /*: Props*/, propName /*: string*/) {\n    const value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxHeight not Number\");\n    if (value < props.h || value < props.minH) return new Error(\"maxHeight smaller than item height/minHeight\");\n  },\n  // ID is nice to have for callbacks\n  i: _propTypes.default.string.isRequired,\n  // Resize handle options\n  resizeHandles: _ReactGridLayoutPropTypes.resizeHandleAxesType,\n  resizeHandle: _ReactGridLayoutPropTypes.resizeHandleType,\n  // Functions\n  onDragStop: _propTypes.default.func,\n  onDragStart: _propTypes.default.func,\n  onDrag: _propTypes.default.func,\n  onResizeStop: _propTypes.default.func,\n  onResizeStart: _propTypes.default.func,\n  onResize: _propTypes.default.func,\n  // Flags\n  isDraggable: _propTypes.default.bool.isRequired,\n  isResizable: _propTypes.default.bool.isRequired,\n  isBounded: _propTypes.default.bool.isRequired,\n  static: _propTypes.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes.default.bool.isRequired,\n  transformScale: _propTypes.default.number,\n  // Others\n  className: _propTypes.default.string,\n  // Selector for draggable handle\n  handle: _propTypes.default.string,\n  // Selector for draggable cancel (see react-draggable)\n  cancel: _propTypes.default.string,\n  // Current position of a dropping element\n  droppingPosition: _propTypes.default.shape({\n    e: _propTypes.default.object.isRequired,\n    left: _propTypes.default.number.isRequired,\n    top: _propTypes.default.number.isRequired\n  })\n});\n_defineProperty(GridItem, \"defaultProps\", {\n  className: \"\",\n  cancel: \"\",\n  handle: \"\",\n  minH: 1,\n  minW: 1,\n  maxH: Infinity,\n  maxW: Infinity,\n  transformScale: 1\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}