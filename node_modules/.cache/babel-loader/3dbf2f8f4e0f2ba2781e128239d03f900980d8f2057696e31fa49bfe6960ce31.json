{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setBoard, setDashboards, setLayouts, setWidgets, toggleLayoutChanged } from \"../store/global\";\nimport { INITIAL_LAYOUT, INITIAL_WIDGETS } from \"../constants/initials\";\nimport { useDashboard } from \"./useDashboard\";\nexport const useBoard = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    getLocalDashboards\n  } = useDashboard();\n  const {\n    activeDashboard,\n    dashboards\n  } = useSelector(state => state);\n  const getBoard = () => {\n    const layout_changed = localStorage.getItem(\"layout_changed\");\n    if (layout_changed) {\n      // layout changed before\n      createLayout();\n    } else {\n      // this is the first init..\n      init();\n      dispatch(toggleLayoutChanged(true));\n    }\n  };\n\n  /// combines layouts and widgets by \"i\" and returns\n  /// layout array\n  const generateLayoutArray = (_l, _w) => {\n    return new Promise(resolve => {\n      resolve(_l.map(lo => {\n        const {\n          i\n        } = lo;\n        const widget_info = _w.find(w => w.i === i);\n        return {\n          ...lo,\n          ...widget_info\n        };\n      }));\n    });\n  };\n\n  /// saves widgets, layouts to both global store and local storage\n  const save = async ({\n    layout,\n    widgets\n  }) => {\n    if (activeDashboard === \"home\") {\n      const widgetList = await generateLayoutArray(layout, widgets);\n      dispatch(setBoard(widgetList));\n      dispatch(setWidgets(widgets));\n      dispatch(setLayouts(layout));\n    } else {\n      const localDashboards = await getLocalDashboards();\n      const updatedDashboards = localDashboards.map(dashB => {\n        if (dashB.id === activeDashboard) {\n          return {\n            ...dashB,\n            widgets,\n            layouts: layout\n          };\n        } else {\n          return dashB;\n        }\n      });\n      dispatch(setDashboards(updatedDashboards));\n      const widgetList = await generateLayoutArray(layout, widgets);\n      dispatch(setBoard(widgetList));\n    }\n  };\n\n  /// create layout according to the selected dashboard id\n  /// and sets the board\n  const createLayout = async () => {\n    if (activeDashboard === \"home\") {\n      let layout = await JSON.parse(localStorage.getItem(\"layouts\"));\n      let widgets = await JSON.parse(localStorage.getItem(\"widgets\"));\n      const generatedLayout = await generateLayoutArray(layout, widgets);\n      dispatch(setBoard(generatedLayout));\n      save({\n        layout,\n        widgets\n      });\n    } else {\n      if (dashboards.length > 0) {\n        const selectedDashboard = dashboards.filter(dashB => dashB.id === activeDashboard)[0];\n        let layout = selectedDashboard.layouts;\n        let widgets = selectedDashboard.widgets;\n        const generatedLayout = await generateLayoutArray(layout, widgets);\n        dispatch(setBoard(generatedLayout));\n        save({\n          layout,\n          widgets\n        });\n      }\n    }\n  };\n  const deleteWidget = async widgetId => {\n    if (activeDashboard === \"home\") {\n      let layouts = await JSON.parse(localStorage.getItem(\"layouts\"));\n      let widgets = await JSON.parse(localStorage.getItem(\"widgets\"));\n      const newLayouts = layouts.filter(ly => ly.i !== widgetId && ly);\n      const newWidgets = widgets.filter(wd => wd.i !== widgetId && wd);\n      save({\n        layout: newLayouts,\n        widgets: newWidgets\n      });\n    } else {\n      const thisDashboard = dashboards.find(dashB => dashB.id === activeDashboard);\n      const newLayouts = thisDashboard.layouts.filter(ly => ly.i !== widgetId && ly);\n      const newWidgets = thisDashboard.widgets.filter(wd => wd.i !== widgetId && wd);\n      save({\n        layout: newLayouts,\n        widgets: newWidgets\n      });\n    }\n  };\n  const init = async () => {\n    const layout = INITIAL_LAYOUT;\n    const widgets = INITIAL_WIDGETS;\n    save({\n      layout,\n      widgets\n    });\n  };\n  return {\n    save,\n    init,\n    createLayout,\n    generateLayoutArray,\n    getBoard,\n    deleteWidget\n  };\n};\n_s(useBoard, \"flWWDmb/p/iWDwKHT1wgcW+XZQ4=\", false, function () {\n  return [useDispatch, useDashboard, useSelector];\n});","map":{"version":3,"names":["useDispatch","useSelector","setBoard","setDashboards","setLayouts","setWidgets","toggleLayoutChanged","INITIAL_LAYOUT","INITIAL_WIDGETS","useDashboard","useBoard","_s","dispatch","getLocalDashboards","activeDashboard","dashboards","state","getBoard","layout_changed","localStorage","getItem","createLayout","init","generateLayoutArray","_l","_w","Promise","resolve","map","lo","i","widget_info","find","w","save","layout","widgets","widgetList","localDashboards","updatedDashboards","dashB","id","layouts","JSON","parse","generatedLayout","length","selectedDashboard","filter","deleteWidget","widgetId","newLayouts","ly","newWidgets","wd","thisDashboard"],"sources":["/Users/isaacson/Projects/invester/src/hooks/useBoard.ts"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport {\n    GlobalData,\n    setBoard,\n    setDashboards,\n    setLayouts,\n    setWidgets,\n    toggleLayoutChanged,\n} from \"../store/global\";\nimport { Layout } from \"react-grid-layout\";\nimport { Widget, WidgetInfo } from \"../components/Board/Board\";\nimport { INITIAL_LAYOUT, INITIAL_WIDGETS } from \"../constants/initials\";\nimport { useDashboard } from \"./useDashboard\";\n\nexport const useBoard = (): UseBoardMethods => {\n    const dispatch = useDispatch();\n    const { getLocalDashboards } = useDashboard();\n    const { activeDashboard, dashboards } = useSelector(\n        (state: GlobalData) => state\n    );\n\n    const getBoard = () => {\n        const layout_changed = localStorage.getItem(\"layout_changed\");\n        if (layout_changed) {\n            // layout changed before\n            createLayout();\n        } else {\n            // this is the first init..\n            init();\n            dispatch(toggleLayoutChanged(true));\n        }\n    };\n\n    /// combines layouts and widgets by \"i\" and returns\n    /// layout array\n    const generateLayoutArray = (\n        _l: Layout[],\n        _w: Widget[]\n    ): Promise<WidgetInfo[]> => {\n        return new Promise((resolve) => {\n            resolve(\n                _l.map((lo) => {\n                    const { i } = lo;\n                    const widget_info = _w.find((w: Widget) => w.i === i);\n                    return { ...lo, ...widget_info };\n                }) as WidgetInfo[]\n            );\n        });\n    };\n\n    /// saves widgets, layouts to both global store and local storage\n    const save = async ({ layout, widgets }: UseBoardProps) => {\n        if (activeDashboard === \"home\") {\n            const widgetList: Awaited<Promise<WidgetInfo[]>> =\n                await generateLayoutArray(layout, widgets);\n            dispatch(setBoard(widgetList));\n            dispatch(setWidgets(widgets));\n            dispatch(setLayouts(layout));\n        } else {\n            const localDashboards = await getLocalDashboards();\n            const updatedDashboards = localDashboards.map((dashB) => {\n                if (dashB.id === activeDashboard) {\n                    return { ...dashB, widgets, layouts: layout };\n                } else {\n                    return dashB;\n                }\n            });\n            dispatch(setDashboards(updatedDashboards));\n            const widgetList: Awaited<Promise<WidgetInfo[]>> =\n                await generateLayoutArray(layout, widgets);\n            dispatch(setBoard(widgetList));\n        }\n    };\n\n    /// create layout according to the selected dashboard id\n    /// and sets the board\n    const createLayout = async () => {\n        if (activeDashboard === \"home\") {\n            let layout: Layout[] = await JSON.parse(\n                localStorage.getItem(\"layouts\") as string\n            );\n            let widgets: WidgetInfo[] = await JSON.parse(\n                localStorage.getItem(\"widgets\") as string\n            );\n\n            const generatedLayout: Awaited<Promise<WidgetInfo[]>> =\n                await generateLayoutArray(layout, widgets);\n            dispatch(setBoard(generatedLayout));\n            save({ layout, widgets });\n        } else {\n            if (dashboards.length > 0) {\n                const selectedDashboard = dashboards.filter(\n                    (dashB) => dashB.id === activeDashboard\n                )[0];\n                let layout: Layout[] = selectedDashboard.layouts;\n                let widgets: Widget[] = selectedDashboard.widgets;\n\n                const generatedLayout: Awaited<Promise<WidgetInfo[]>> =\n                    await generateLayoutArray(layout, widgets);\n                dispatch(setBoard(generatedLayout));\n                save({ layout, widgets });\n            }\n        }\n    };\n\n    const deleteWidget = async (widgetId: string) => {\n        if (activeDashboard === \"home\") {\n            let layouts: Layout[] = await JSON.parse(\n                localStorage.getItem(\"layouts\") as string\n            );\n            let widgets: WidgetInfo[] = await JSON.parse(\n                localStorage.getItem(\"widgets\") as string\n            );\n\n            const newLayouts = layouts.filter((ly) => ly.i !== widgetId && ly);\n            const newWidgets = widgets.filter((wd) => wd.i !== widgetId && wd);\n\n            save({ layout: newLayouts, widgets: newWidgets });\n        } else {\n            const thisDashboard: Dashboard = dashboards.find(\n                (dashB) => dashB.id === activeDashboard\n            ) as Dashboard;\n            const newLayouts = thisDashboard.layouts.filter(\n                (ly) => ly.i !== widgetId && ly\n            );\n            const newWidgets = thisDashboard.widgets.filter(\n                (wd) => wd.i !== widgetId && wd\n            );\n            save({ layout: newLayouts, widgets: newWidgets });\n        }\n    };\n\n    const init = async () => {\n        const layout: Layout[] = INITIAL_LAYOUT;\n        const widgets: Widget[] = INITIAL_WIDGETS;\n\n        save({ layout, widgets });\n    };\n\n    return {\n        save,\n        init,\n        createLayout,\n        generateLayoutArray,\n        getBoard,\n        deleteWidget,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}